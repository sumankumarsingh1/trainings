{
    "swagger": "2.0",
    "info": {
        "title": "Service Catalog Management",
        "description": "## TMF API Reference: TMF633 - Service Catalog Management\n\n### Release : 18.5 - December 2018\n\nService Catalog API is one of Catalog Management API Family. Service Catalog API goal is to provide a catalog of services. \n\n### Resource \n- serviceCatalog\n\n### Operations\nService Catalog API performs the following operations on the resource :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity (for administration purposes)\n- Manage notification of events",
        "version": "3.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/serviceCatalogManagement/v3/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "serviceCatalog"
        },
        {
            "name": "serviceCategory"
        },
        {
            "name": "serviceCandidate"
        },
        {
            "name": "serviceSpecification"
        },
        {
            "name": "importJob"
        },
        {
            "name": "exportJob"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/serviceCatalog": {
            "get": {
                "operationId": "listServiceCatalog",
                "summary": "List or find ServiceCatalog objects",
                "description": "This operation list or find ServiceCatalog entities",
                "tags": [
                    "serviceCatalog"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "required": false,
                        "in": "query",
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer",
                                "description": "Total number of items matching criteria"
                            },
                            "X-Result-Count": {
                                "type": "integer",
                                "description": "Actual number of items returned in the response body"
                            }
                        },
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceCatalog"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createServiceCatalog",
                "summary": "Creates a ServiceCatalog",
                "description": "This operation creates a ServiceCatalog entity.",
                "tags": [
                    "serviceCatalog"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog_Create"
                        },
                        "required": true,
                        "in": "body",
                        "name": "serviceCatalog",
                        "description": "The ServiceCatalog to be created"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceCatalog/{id}": {
            "get": {
                "operationId": "retrieveServiceCatalog",
                "summary": "Retrieves a ServiceCatalog by ID",
                "description": "This operation retrieves a ServiceCatalog entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "serviceCatalog"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceCatalog"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to provide in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchServiceCatalog",
                "summary": "Updates partially a ServiceCatalog",
                "description": "This operation updates partially a ServiceCatalog entity.",
                "tags": [
                    "serviceCatalog"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceCatalog"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog_Update"
                        },
                        "required": true,
                        "in": "body",
                        "name": "serviceCatalog",
                        "description": "The ServiceCatalog to be updated"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteServiceCatalog",
                "summary": "Deletes a ServiceCatalog",
                "description": "This operation deletes a ServiceCatalog entity.",
                "tags": [
                    "serviceCatalog"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceCatalog"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceCategory": {
            "get": {
                "operationId": "listServiceCategory",
                "summary": "List or find ServiceCategory objects",
                "description": "This operation list or find ServiceCategory entities",
                "tags": [
                    "serviceCategory"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "required": false,
                        "in": "query",
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer",
                                "description": "Total number of items matching criteria"
                            },
                            "X-Result-Count": {
                                "type": "integer",
                                "description": "Actual number of items returned in the response body"
                            }
                        },
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceCategory"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createServiceCategory",
                "summary": "Creates a ServiceCategory",
                "description": "This operation creates a ServiceCategory entity.",
                "tags": [
                    "serviceCategory"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory_Create"
                        },
                        "required": true,
                        "in": "body",
                        "name": "serviceCategory",
                        "description": "The ServiceCategory to be created"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceCategory/{id}": {
            "get": {
                "operationId": "retrieveServiceCategory",
                "summary": "Retrieves a ServiceCategory by ID",
                "description": "This operation retrieves a ServiceCategory entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "serviceCategory"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceCategory"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to provide in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchServiceCategory",
                "summary": "Updates partially a ServiceCategory",
                "description": "This operation updates partially a ServiceCategory entity.",
                "tags": [
                    "serviceCategory"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceCategory"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory_Update"
                        },
                        "required": true,
                        "in": "body",
                        "name": "serviceCategory",
                        "description": "The ServiceCategory to be updated"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteServiceCategory",
                "summary": "Deletes a ServiceCategory",
                "description": "This operation deletes a ServiceCategory entity.",
                "tags": [
                    "serviceCategory"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceCategory"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceCandidate": {
            "get": {
                "operationId": "listServiceCandidate",
                "summary": "List or find ServiceCandidate objects",
                "description": "This operation list or find ServiceCandidate entities",
                "tags": [
                    "serviceCandidate"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "required": false,
                        "in": "query",
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer",
                                "description": "Total number of items matching criteria"
                            },
                            "X-Result-Count": {
                                "type": "integer",
                                "description": "Actual number of items returned in the response body"
                            }
                        },
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceCandidate"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createServiceCandidate",
                "summary": "Creates a ServiceCandidate",
                "description": "This operation creates a ServiceCandidate entity.",
                "tags": [
                    "serviceCandidate"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate_Create"
                        },
                        "required": true,
                        "in": "body",
                        "name": "serviceCandidate",
                        "description": "The ServiceCandidate to be created"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceCandidate/{id}": {
            "get": {
                "operationId": "retrieveServiceCandidate",
                "summary": "Retrieves a ServiceCandidate by ID",
                "description": "This operation retrieves a ServiceCandidate entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "serviceCandidate"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceCandidate"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to provide in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchServiceCandidate",
                "summary": "Updates partially a ServiceCandidate",
                "description": "This operation updates partially a ServiceCandidate entity.",
                "tags": [
                    "serviceCandidate"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceCandidate"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate_Update"
                        },
                        "required": true,
                        "in": "body",
                        "name": "serviceCandidate",
                        "description": "The ServiceCandidate to be updated"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteServiceCandidate",
                "summary": "Deletes a ServiceCandidate",
                "description": "This operation deletes a ServiceCandidate entity.",
                "tags": [
                    "serviceCandidate"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceCandidate"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceSpecification": {
            "get": {
                "operationId": "listServiceSpecification",
                "summary": "List or find ServiceSpecification objects",
                "description": "This operation list or find ServiceSpecification entities",
                "tags": [
                    "serviceSpecification"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "required": false,
                        "in": "query",
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer",
                                "description": "Total number of items matching criteria"
                            },
                            "X-Result-Count": {
                                "type": "integer",
                                "description": "Actual number of items returned in the response body"
                            }
                        },
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceSpecification"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createServiceSpecification",
                "summary": "Creates a ServiceSpecification",
                "description": "This operation creates a ServiceSpecification entity.",
                "tags": [
                    "serviceSpecification"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification_Create"
                        },
                        "required": true,
                        "in": "body",
                        "name": "serviceSpecification",
                        "description": "The ServiceSpecification to be created"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceSpecification/{id}": {
            "get": {
                "operationId": "retrieveServiceSpecification",
                "summary": "Retrieves a ServiceSpecification by ID",
                "description": "This operation retrieves a ServiceSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "serviceSpecification"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceSpecification"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to provide in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchServiceSpecification",
                "summary": "Updates partially a ServiceSpecification",
                "description": "This operation updates partially a ServiceSpecification entity.",
                "tags": [
                    "serviceSpecification"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceSpecification"
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification_Update"
                        },
                        "required": true,
                        "in": "body",
                        "name": "serviceSpecification",
                        "description": "The ServiceSpecification to be updated"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteServiceSpecification",
                "summary": "Deletes a ServiceSpecification",
                "description": "This operation deletes a ServiceSpecification entity.",
                "tags": [
                    "serviceSpecification"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ServiceSpecification"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/importJob": {
            "get": {
                "operationId": "listImportJob",
                "summary": "List or find ImportJob objects",
                "description": "This operation list or find ImportJob entities",
                "tags": [
                    "importJob"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "required": false,
                        "in": "query",
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer",
                                "description": "Total number of items matching criteria"
                            },
                            "X-Result-Count": {
                                "type": "integer",
                                "description": "Actual number of items returned in the response body"
                            }
                        },
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ImportJob"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createImportJob",
                "summary": "Creates a ImportJob",
                "description": "This operation creates a ImportJob entity.",
                "tags": [
                    "importJob"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ImportJob_Create"
                        },
                        "required": true,
                        "in": "body",
                        "name": "importJob",
                        "description": "The ImportJob to be created"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ImportJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/importJob/{id}": {
            "get": {
                "operationId": "retrieveImportJob",
                "summary": "Retrieves a ImportJob by ID",
                "description": "This operation retrieves a ImportJob entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "importJob"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ImportJob"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to provide in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ImportJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteImportJob",
                "summary": "Deletes a ImportJob",
                "description": "This operation deletes a ImportJob entity.",
                "tags": [
                    "importJob"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ImportJob"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exportJob": {
            "get": {
                "operationId": "listExportJob",
                "summary": "List or find ExportJob objects",
                "description": "This operation list or find ExportJob entities",
                "tags": [
                    "exportJob"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "required": false,
                        "in": "query",
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response"
                    },
                    {
                        "type": "integer",
                        "required": false,
                        "in": "query",
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer",
                                "description": "Total number of items matching criteria"
                            },
                            "X-Result-Count": {
                                "type": "integer",
                                "description": "Actual number of items returned in the response body"
                            }
                        },
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ExportJob"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createExportJob",
                "summary": "Creates a ExportJob",
                "description": "This operation creates a ExportJob entity.",
                "tags": [
                    "exportJob"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ExportJob_Create"
                        },
                        "required": true,
                        "in": "body",
                        "name": "exportJob",
                        "description": "The ExportJob to be created"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ExportJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exportJob/{id}": {
            "get": {
                "operationId": "retrieveExportJob",
                "summary": "Retrieves a ExportJob by ID",
                "description": "This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "exportJob"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ExportJob"
                    },
                    {
                        "required": false,
                        "type": "string",
                        "name": "fields",
                        "in": "query",
                        "description": "Comma-separated properties to provide in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ExportJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteExportJob",
                "summary": "Deletes a ExportJob",
                "description": "This operation deletes a ExportJob entity.",
                "tags": [
                    "exportJob"
                ],
                "parameters": [
                    {
                        "required": true,
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of the ExportJob"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceSpecificationCreateNotification": {
            "post": {
                "operationId": "listenToServiceSpecificationCreateNotification",
                "summary": "Client listener for entity ServiceSpecificationCreateNotification",
                "description": "Example of a client listener for receiving the notification ServiceSpecificationCreateNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecificationCreateNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceSpecificationChangeNotification": {
            "post": {
                "operationId": "listenToServiceSpecificationChangeNotification",
                "summary": "Client listener for entity ServiceSpecificationChangeNotification",
                "description": "Example of a client listener for receiving the notification ServiceSpecificationChangeNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecificationChangeNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceSpecificationDeleteNotification": {
            "post": {
                "operationId": "listenToServiceSpecificationDeleteNotification",
                "summary": "Client listener for entity ServiceSpecificationDeleteNotification",
                "description": "Example of a client listener for receiving the notification ServiceSpecificationDeleteNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecificationDeleteNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCandidateCreateNotification": {
            "post": {
                "operationId": "listenToServiceCandidateCreateNotification",
                "summary": "Client listener for entity ServiceCandidateCreateNotification",
                "description": "Example of a client listener for receiving the notification ServiceCandidateCreateNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidateCreateNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCandidateChangeNotification": {
            "post": {
                "operationId": "listenToServiceCandidateChangeNotification",
                "summary": "Client listener for entity ServiceCandidateChangeNotification",
                "description": "Example of a client listener for receiving the notification ServiceCandidateChangeNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidateChangeNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCandidateDeleteNotification": {
            "post": {
                "operationId": "listenToServiceCandidateDeleteNotification",
                "summary": "Client listener for entity ServiceCandidateDeleteNotification",
                "description": "Example of a client listener for receiving the notification ServiceCandidateDeleteNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidateDeleteNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCategoryCreateNotification": {
            "post": {
                "operationId": "listenToServiceCategoryCreateNotification",
                "summary": "Client listener for entity ServiceCategoryCreateNotification",
                "description": "Example of a client listener for receiving the notification ServiceCategoryCreateNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategoryCreateNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCategoryChangeNotification": {
            "post": {
                "operationId": "listenToServiceCategoryChangeNotification",
                "summary": "Client listener for entity ServiceCategoryChangeNotification",
                "description": "Example of a client listener for receiving the notification ServiceCategoryChangeNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategoryChangeNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCategoryDeleteNotification": {
            "post": {
                "operationId": "listenToServiceCategoryDeleteNotification",
                "summary": "Client listener for entity ServiceCategoryDeleteNotification",
                "description": "Example of a client listener for receiving the notification ServiceCategoryDeleteNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategoryDeleteNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCatalogCreateNotification": {
            "post": {
                "operationId": "listenToServiceCatalogCreateNotification",
                "summary": "Client listener for entity ServiceCatalogCreateNotification",
                "description": "Example of a client listener for receiving the notification ServiceCatalogCreateNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalogCreateNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCatalogChangeNotification": {
            "post": {
                "operationId": "listenToServiceCatalogChangeNotification",
                "summary": "Client listener for entity ServiceCatalogChangeNotification",
                "description": "Example of a client listener for receiving the notification ServiceCatalogChangeNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalogChangeNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCatalogBatchNotification": {
            "post": {
                "operationId": "listenToServiceCatalogBatchNotification",
                "summary": "Client listener for entity ServiceCatalogBatchNotification",
                "description": "Example of a client listener for receiving the notification ServiceCatalogBatchNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalogBatchNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceCatalogDeleteNotification": {
            "post": {
                "operationId": "listenToServiceCatalogDeleteNotification",
                "summary": "Client listener for entity ServiceCatalogDeleteNotification",
                "description": "Example of a client listener for receiving the notification ServiceCatalogDeleteNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalogDeleteNotification"
                        },
                        "description": "The event data",
                        "required": true,
                        "name": "data",
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Any": {},
        "AttachmentRef": {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique-Identifier for this attachment"
                },
                "href": {
                    "type": "string",
                    "description": "URL serving as reference for the attachment resource"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "url": {
                    "type": "string",
                    "description": "Link to the attachment media/content"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id",
                "href"
            ]
        },
        "ExportJob": {
            "type": "object",
            "description": "Represents a task used to export resources to a file",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the export job"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the export job"
                },
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Data at which the job was completed"
                },
                "contentType": {
                    "type": "string",
                    "description": "The format of the exported data"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was created"
                },
                "errorLog": {
                    "type": "string",
                    "description": "Reason for failure"
                },
                "path": {
                    "type": "string",
                    "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
                },
                "query": {
                    "type": "string",
                    "description": "Used to scope the exported data"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the export job (not started, running, succeeded, failed)"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the file containing the data to be exported"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ExportJob_Create": {
            "type": "object",
            "description": "Represents a task used to export resources to a file\nSkipped properties: id,href",
            "required": [
                "url"
            ],
            "properties": {
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Data at which the job was completed"
                },
                "contentType": {
                    "type": "string",
                    "description": "The format of the exported data"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was created"
                },
                "errorLog": {
                    "type": "string",
                    "description": "Reason for failure"
                },
                "path": {
                    "type": "string",
                    "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
                },
                "query": {
                    "type": "string",
                    "description": "Used to scope the exported data"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the export job (not started, running, succeeded, failed)"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the file containing the data to be exported"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ImportJob": {
            "type": "object",
            "description": "Represents a task used to import resources from a file",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the import job"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the import job"
                },
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was completed"
                },
                "contentType": {
                    "type": "string",
                    "description": "Indicates the format of the imported data"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was created"
                },
                "errorLog": {
                    "type": "string",
                    "description": "Reason for failure if status is failed"
                },
                "path": {
                    "type": "string",
                    "description": "URL of the root resource where the content of the file specified by the import job must be applied"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the import job (not started, running, succeeded, failed)"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the file containing the data to be imported"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ImportJob_Create": {
            "type": "object",
            "description": "Represents a task used to import resources from a file\nSkipped properties: id,href",
            "required": [
                "url"
            ],
            "properties": {
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was completed"
                },
                "contentType": {
                    "type": "string",
                    "description": "Indicates the format of the imported data"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the job was created"
                },
                "errorLog": {
                    "type": "string",
                    "description": "Reason for failure if status is failed"
                },
                "path": {
                    "type": "string",
                    "description": "URL of the root resource where the content of the file specified by the import job must be applied"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the import job (not started, running, succeeded, failed)"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the file containing the data to be imported"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "RelatedParty": {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related party"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related party, could be a party reference or a party role reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related party"
                },
                "role": {
                    "type": "string",
                    "description": "Role of the related party."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ResourceSpecificationRef": {
            "type": "object",
            "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the resource specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the resource specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the requiredResourceSpecification"
                },
                "version": {
                    "type": "string",
                    "description": "Resource specification version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id",
                "href"
            ]
        },
        "ServiceCandidate": {
            "type": "object",
            "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of this REST resource"
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink reference to this REST resource"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service candidate."
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "the version of service candidate"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    },
                    "description": "List of categories for this candidate"
                },
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The service specification implied by this candidate"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceCandidate_Create": {
            "type": "object",
            "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service candidate."
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "the version of service candidate"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    },
                    "description": "List of categories for this candidate"
                },
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The service specification implied by this candidate"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceCandidate_Update": {
            "type": "object",
            "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.\nSkipped properties: id,href,lastUpdate",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this REST resource"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service candidate."
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this REST resource"
                },
                "version": {
                    "type": "string",
                    "description": "the version of service candidate"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    },
                    "description": "List of categories for this candidate"
                },
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The service specification implied by this candidate"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this REST resource is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceCandidateRef": {
            "type": "object",
            "description": "ServiceCandidate reference. ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service candidate"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the service candidate"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service candidate"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the service candidate"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id",
                "href"
            ]
        },
        "ServiceCatalog": {
            "type": "object",
            "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the ServiceCatalog"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the service catalog"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this catalog"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service catalog"
                },
                "version": {
                    "type": "string",
                    "description": "ServiceCatalog version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    },
                    "description": "List of service categories associated with this catalog"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties or party roles related to this category"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service catalog is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceCatalog_Create": {
            "type": "object",
            "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this catalog"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service catalog"
                },
                "version": {
                    "type": "string",
                    "description": "ServiceCatalog version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    },
                    "description": "List of service categories associated with this catalog"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties or party roles related to this category"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service catalog is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceCatalog_Update": {
            "type": "object",
            "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.\nSkipped properties: id,href,lastUpdate",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this catalog"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service catalog"
                },
                "version": {
                    "type": "string",
                    "description": "ServiceCatalog version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    },
                    "description": "List of service categories associated with this catalog"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "List of parties or party roles related to this category"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service catalog is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceCategory": {
            "type": "object",
            "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the category"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the category"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the category"
                },
                "isRoot": {
                    "type": "boolean",
                    "description": "If true, this Boolean indicates that the category is a root of categories"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the category"
                },
                "parentId": {
                    "type": "string",
                    "description": "Unique identifier of the parent category"
                },
                "version": {
                    "type": "string",
                    "description": "ServiceCategory version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    },
                    "description": "List of child categories in the tree for in this category"
                },
                "serviceCandidate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCandidateRef"
                    },
                    "description": "List of service candidates associated with this category"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the category is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceCategory_Create": {
            "type": "object",
            "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the category"
                },
                "isRoot": {
                    "type": "boolean",
                    "description": "If true, this Boolean indicates that the category is a root of categories"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the category"
                },
                "parentId": {
                    "type": "string",
                    "description": "Unique identifier of the parent category"
                },
                "version": {
                    "type": "string",
                    "description": "ServiceCategory version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    },
                    "description": "List of child categories in the tree for in this category"
                },
                "serviceCandidate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCandidateRef"
                    },
                    "description": "List of service candidates associated with this category"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the category is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceCategory_Update": {
            "type": "object",
            "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href,lastUpdate",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the category"
                },
                "isRoot": {
                    "type": "boolean",
                    "description": "If true, this Boolean indicates that the category is a root of categories"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the category"
                },
                "parentId": {
                    "type": "string",
                    "description": "Unique identifier of the parent category"
                },
                "version": {
                    "type": "string",
                    "description": "ServiceCategory version"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    },
                    "description": "List of child categories in the tree for in this category"
                },
                "serviceCandidate": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceCandidateRef"
                    },
                    "description": "List of service candidates associated with this category"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the category is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceCategoryRef": {
            "type": "object",
            "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of category"
                },
                "href": {
                    "type": "string",
                    "description": "Hypertext Reference of the category"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the category."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id",
                "href"
            ]
        },
        "ServiceLevelSpecificationRef": {
            "type": "object",
            "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier to a service level specification."
                },
                "href": {
                    "type": "string",
                    "description": "The hyperlink to access a service level specification."
                },
                "name": {
                    "type": "string",
                    "description": "The name of Service Level Specification"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id",
                "href"
            ]
        },
        "ServiceSpecCharRelationship": {
            "type": "object",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among serviceSpecCharacteristics.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the target specification"
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink reference to the target specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target  characteristic"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
                },
                "role": {
                    "type": "string",
                    "description": "The association role for this service specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the serviceSpecCharRelationship is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecCharacteristic": {
            "type": "object",
            "description": "This class represents the key features of this service specification. For example, bandwidth is a characteristic of many different types of services; if bandwidth is a relevant characteristic (e.g., from the point-of-view of a Customer obtaining this Service via a Product) then bandwidth would be a ServiceSpecCharacteristic for that particular Service.",
            "properties": {
                "configurable": {
                    "type": "boolean",
                    "description": "If true, the Boolean indicates that the serviceSpecCharacteristic is configurable"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the serviceSpecCharacteristic is"
                },
                "extensible": {
                    "type": "boolean",
                    "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity."
                },
                "isUnique": {
                    "type": "boolean",
                    "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
                },
                "maxCardinality": {
                    "type": "integer",
                    "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
                },
                "minCardinality": {
                    "type": "integer",
                    "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                },
                "regex": {
                    "type": "string",
                    "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                },
                "serviceSpecCharRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharRelationship"
                    },
                    "description": "A list of service spec char relationships (ServiceSpecCharRelationship [*]). An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
                },
                "serviceSpecCharacteristicValue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristicValue"
                    },
                    "description": "A list of service spec characteristic values (ServiceSpecCharacteristicValue [*]). A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the serviceSpecCharacteristic is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@valueSchemaLocation": {
                    "type": "string",
                    "description": "This (optional) field provides a link to the schema describing the value type."
                }
            }
        },
        "ServiceSpecCharacteristicValue": {
            "type": "object",
            "description": "A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on.",
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Indicates if the value is the default value for a characteristic"
                },
                "rangeInterval": {
                    "type": "string",
                    "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
                },
                "regex": {
                    "type": "string",
                    "description": "A regular expression constraint for given value"
                },
                "unitOfMeasure": {
                    "type": "string",
                    "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
                },
                "valueFrom": {
                    "type": "integer",
                    "description": "The low range value that a characteristic can take on"
                },
                "valueTo": {
                    "type": "integer",
                    "description": "The upper range value that a characteristic can take on"
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which a value is applicable"
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecRelationship": {
            "type": "object",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among service specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the target serviceSpecification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the target serviceSpecification"
                },
                "name": {
                    "type": "string",
                    "description": "The name given to the target service specification instance"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
                },
                "role": {
                    "type": "string",
                    "description": "The association role for this service specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the serviceSpecRelationship is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecification": {
            "type": "object",
            "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the service specification"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of the service specification"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "serviceLevelSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceLevelSpecificationRef"
                    },
                    "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
                },
                "serviceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "serviceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecRelationship"
                    },
                    "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecification_Create": {
            "type": "object",
            "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of the service specification"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "serviceLevelSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceLevelSpecificationRef"
                    },
                    "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
                },
                "serviceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "serviceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecRelationship"
                    },
                    "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecification_Update": {
            "type": "object",
            "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href,lastUpdate",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "serviceLevelSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceLevelSpecificationRef"
                    },
                    "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
                },
                "serviceSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "serviceSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecRelationship"
                    },
                    "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecificationRef": {
            "type": "object",
            "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the serviceSpecification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the requiredServiceSpecification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id",
                "href"
            ]
        },
        "TargetServiceSchema": {
            "type": "object",
            "description": "The reference object to the schema and type of target service which is described by service specification",
            "required": [
                "@schemaLocation",
                "@type"
            ],
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "This field provides a link to the schema describing the target service"
                },
                "@type": {
                    "type": "string",
                    "description": "Class type of the target service"
                }
            }
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
                }
            }
        },
        "EventSubscription": {
            "required": [
                "id",
                "callback"
            ],
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "required": [
                "callback"
            ],
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "ServiceSpecificationCreateNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceSpecificationCreateEvent"
                }
            }
        },
        "ServiceSpecificationCreateEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceSpecification"
                }
            }
        },
        "ServiceSpecificationChangeNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceSpecificationChangeEvent"
                }
            }
        },
        "ServiceSpecificationChangeEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceSpecification"
                }
            }
        },
        "ServiceSpecificationDeleteNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceSpecificationDeleteEvent"
                }
            }
        },
        "ServiceSpecificationDeleteEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceSpecification"
                }
            }
        },
        "ServiceCandidateCreateNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCandidateCreateEvent"
                }
            }
        },
        "ServiceCandidateCreateEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCandidate": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCandidate"
                }
            }
        },
        "ServiceCandidateChangeNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCandidateChangeEvent"
                }
            }
        },
        "ServiceCandidateChangeEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCandidate": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCandidate"
                }
            }
        },
        "ServiceCandidateDeleteNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCandidateDeleteEvent"
                }
            }
        },
        "ServiceCandidateDeleteEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCandidate": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCandidate"
                }
            }
        },
        "ServiceCategoryCreateNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCategoryCreateEvent"
                }
            }
        },
        "ServiceCategoryCreateEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCategory": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCategory"
                }
            }
        },
        "ServiceCategoryChangeNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCategoryChangeEvent"
                }
            }
        },
        "ServiceCategoryChangeEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCategory": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCategory"
                }
            }
        },
        "ServiceCategoryDeleteNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCategoryDeleteEvent"
                }
            }
        },
        "ServiceCategoryDeleteEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCategory": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCategory"
                }
            }
        },
        "ServiceCatalogCreateNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCatalogCreateEvent"
                }
            }
        },
        "ServiceCatalogCreateEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCatalog": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCatalog"
                }
            }
        },
        "ServiceCatalogChangeNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCatalogChangeEvent"
                }
            }
        },
        "ServiceCatalogChangeEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCatalog": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCatalog"
                }
            }
        },
        "ServiceCatalogBatchNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCatalogBatchEvent"
                }
            }
        },
        "ServiceCatalogBatchEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCatalog": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCatalog"
                }
            }
        },
        "ServiceCatalogDeleteNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "description": "Time of the event occurrence",
                    "format": "date-time"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceCatalogDeleteEvent"
                }
            }
        },
        "ServiceCatalogDeleteEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceCatalog": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceCatalog"
                }
            }
        },
        "Error": {
            "required": [
                "code",
                "reason"
            ],
            "type": "object",
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "integer",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "description": "URI of documentation describing the error.",
                    "format": "uri"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                    "format": "uri"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}
